(ns tech.jgood.gleanmo.test.app.shared-test
  (:require
    [clojure.test       :refer [deftest is testing]]
    [com.biffweb        :as    biff
                        :refer [test-xtdb-node]]
    [tech.jgood.gleanmo :as main]
    [tech.jgood.gleanmo.app.shared :as shared]
    [tech.jgood.gleanmo.db.mutations :as mutations]
    [tick.core :as t]
    [xtdb.api           :as xt])
  (:import
    [java.util UUID]))

(defn get-context
  [node]
  {:biff.xtdb/node  node,
   :biff/db         (xt/db node),
   :biff/malli-opts #'main/malli-opts})

(deftest turn-off-sensitive-button-test
  (testing "should return nil when show-sensitive is false"
    (let [result (shared/turn-off-sensitive-button false (UUID/randomUUID))]
      (is (nil? result))))

  (testing "should return button component when show-sensitive is true"
    (let [user-id (UUID/randomUUID)
          result  (shared/turn-off-sensitive-button true user-id)]
      (is (vector? result))
      (is (= :div.mb-2.p-2.bg-gray-100.border.border-gray-300.rounded.text-sm (first result)))
      ;; Check that the form action includes the user ID - the form is generated by biff/form
      (let [form-component (nth result 2)] ;; Skip div wrapper and span
        (is (vector? form-component))
        (is (= :form (first form-component)))
        (let [form-attrs (second form-component)]
          (is (= (str "/app/users/" user-id "/settings/turn-off-sensitive") (:action form-attrs)))
          (is (= "post" (:method form-attrs)))))))

  (testing "should include confirmation dialog"
    (let [user-id (UUID/randomUUID)
          result  (shared/turn-off-sensitive-button true user-id)]
      ;; The form is generated by biff/form so we need to find the button differently
      ;; The form contains: [:form {...} [:input ...] [:button ...]]
      (let [form-component (nth result 2)
            ;; Find the button element in the form (it's the last element, but wrapped in a sequence)
            button-component (first (last form-component))]
        ;; button-component is [:button.class {:attrs} "text"]
        (is (vector? button-component))
        (is (= :button.text-xs.bg-gray-200.hover:bg-gray-300.px-2.py-1.rounded.transition-colors.text-gray-600 (first button-component)))
        (let [button-attrs (second button-component)]
          (is (= "return confirm('Turn off sensitive item display?')" (:onclick button-attrs)))))))

  (testing "should have proper styling classes"
    (let [user-id (UUID/randomUUID)
          result  (shared/turn-off-sensitive-button true user-id)]
      ;; Check outer div classes
      (is (= :div.mb-2.p-2.bg-gray-100.border.border-gray-300.rounded.text-sm (first result)))
      ;; Button classes are already checked in the confirmation dialog test
      (is (vector? result)))))

(deftest side-bar-data-fetching-test
  (testing "should fetch user email and sensitive settings"
    (with-open [node (test-xtdb-node [])]
      (let [ctx     (get-context node)
            user-id (UUID/randomUUID)]
        ;; Create a test user
        (mutations/create-entity! 
          ctx
          {:entity-key :user
           :data {:user/email "test@example.com"
                  :user/joined-at (t/now)}})
        
        ;; Create user settings  
        (mutations/upsert-user-settings! ctx user-id {:user-settings/show-sensitive true})
        
        ;; Test the sidebar context preparation
        (let [sidebar-ctx {:biff/db (xt/db node)
                           :session {:uid user-id}}
              result      (shared/side-bar sidebar-ctx [:div "test content"])]
          ;; Should return a valid hiccup structure
          (is (vector? result))
          (is (= :div.flex.min-h-screen (first result)))))))

  (testing "should handle missing user gracefully"
    (with-open [node (test-xtdb-node [])]
      (let [ctx         (get-context node)
            user-id     (UUID/randomUUID)
            sidebar-ctx {:biff/db (xt/db node)
                         :session {:uid user-id}}
            result      (shared/side-bar sidebar-ctx [:div "test content"])]
        ;; Should still return a valid structure even with no user data
        (is (vector? result))
        (is (= :div.flex.min-h-screen (first result))))))

  (testing "should default to false for show-sensitive when no settings exist"
    (with-open [node (test-xtdb-node [])]
      (let [ctx         (get-context node)
            user-id     (UUID/randomUUID)
            sidebar-ctx {:biff/db (xt/db node)
                         :session {:uid user-id}}]
        ;; Don't create any user settings
        (let [result (shared/side-bar sidebar-ctx [:div "test content"])]
          ;; Should not show the turn-off button since show-sensitive defaults to false
          (is (vector? result)))))))

(deftest param-true-test
  (testing "should return true for 'on'"
    (is (true? (shared/param-true? "on"))))

  (testing "should return true for 'true'"
    (is (true? (shared/param-true? "true"))))

  (testing "should return false for other values"
    (is (false? (shared/param-true? "false")))
    (is (false? (shared/param-true? "off")))
    (is (false? (shared/param-true? nil)))
    (is (false? (shared/param-true? "")))))